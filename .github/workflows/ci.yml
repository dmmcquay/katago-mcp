name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Code is not formatted. Run 'go fmt ./...' to fix."
          gofmt -d .
          exit 1
        fi
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21.x', '1.22.x']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Run tests
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.22.x'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        fail_ci_if_error: false
        verbose: true

  edge-case-tests:
    name: Edge Case Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    - name: Run edge case tests
      run: |
        if [ -f scripts/run-edge-case-tests.sh ]; then
          chmod +x scripts/run-edge-case-tests.sh
          ./scripts/run-edge-case-tests.sh
        else
          echo "No edge case tests found, skipping..."
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    - name: Build
      run: ./build.sh
    
    - name: Test binary
      run: |
        ./katago-mcp -version || true
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: katago-mcp-linux-amd64
        path: katago-mcp

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    # Try to install KataGo and test model
    - name: Install KataGo and test model
      id: install-katago
      continue-on-error: true
      run: |
        echo "Installing KataGo..."
        
        # Install KataGo binary
        wget -q https://github.com/lightvector/KataGo/releases/download/v1.15.1/katago-v1.15.1-linux-x64.tar.gz
        tar -xzf katago-v1.15.1-linux-x64.tar.gz
        sudo mv katago /usr/local/bin/
        chmod +x /usr/local/bin/katago
        
        # Create test directory
        mkdir -p ~/.katago-mcp-test
        
        # Download a small test model (15-block network)
        echo "Downloading test model..."
        wget -q -O ~/.katago-mcp-test/test-model.bin.gz \
          "https://media.katagotraining.org/g170/neuralnets/g170-b15c192-s1672170752-d466197061.bin.gz"
        
        # Generate minimal config for testing
        cat > ~/.katago-mcp-test/test-config.cfg << 'EOF'
        # Minimal KataGo config for CI testing
        numSearchThreads = 1
        maxVisits = 50
        maxTime = 1.0
        nnCacheSizePowerOfTwo = 18
        nnMaxBatchSize = 8
        reportAnalysisWinratesAs = BLACK
        conservativePass = true
        EOF
        
        # Test that KataGo works
        echo "Testing KataGo installation..."
        echo "quit" | timeout 60s katago gtp -model ~/.katago-mcp-test/test-model.bin.gz -config ~/.katago-mcp-test/test-config.cfg
        
        # Export test environment variables
        echo "KATAGO_TEST_MODEL=$HOME/.katago-mcp-test/test-model.bin.gz" >> $GITHUB_ENV
        echo "KATAGO_TEST_CONFIG=$HOME/.katago-mcp-test/test-config.cfg" >> $GITHUB_ENV
        echo "KATAGO_AVAILABLE=true" >> $GITHUB_ENV
        
        echo "‚úÖ KataGo installation successful"
    
    - name: Run E2E tests
      if: env.KATAGO_AVAILABLE == 'true'
      run: |
        echo "üß™ Running E2E tests with KataGo"
        echo "Model: $KATAGO_TEST_MODEL"
        echo "Config: $KATAGO_TEST_CONFIG"
        
        # Run with reduced timeouts for CI
        go test -v -tags=e2e ./e2e -timeout 300s
        
        echo "‚úÖ E2E tests completed successfully"
    
    - name: Skip E2E tests
      if: env.KATAGO_AVAILABLE != 'true'
      run: |
        echo "‚ö†Ô∏è Skipping E2E tests - KataGo installation failed"
        echo ""
        echo "E2E tests require:"
        echo "  - KataGo binary"
        echo "  - Neural network model (~50MB)"
        echo "  - Sufficient CPU for analysis"
        echo ""
        echo "To run E2E tests locally:"
        echo "  1. Install KataGo: brew install katago (macOS) or download from GitHub"
        echo "  2. Set environment variables:"
        echo "     export KATAGO_TEST_MODEL=/path/to/model.bin.gz"
        echo "     export KATAGO_TEST_CONFIG=/path/to/config.cfg"
        echo "  3. Run: go test -v -tags=e2e ./e2e"

  # Optional: Run E2E tests on macOS for better compatibility
  e2e-tests-macos:
    name: E2E Tests (macOS)
    runs-on: macos-latest
    needs: [lint, test]
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    - name: Install KataGo via Homebrew
      id: install-katago-mac
      continue-on-error: true
      run: |
        echo "Installing KataGo via Homebrew..."
        brew install katago
        
        # Create test directory
        mkdir -p ~/.katago-mcp-test
        
        # Download test model
        echo "Downloading test model..."
        curl -L -o ~/.katago-mcp-test/test-model.bin.gz \
          "https://media.katagotraining.org/g170/neuralnets/g170-b15c192-s1672170752-d466197061.bin.gz"
        
        # Generate config using KataGo's built-in generator
        echo "Generating KataGo config..."
        katago genconfig -model ~/.katago-mcp-test/test-model.bin.gz -output ~/.katago-mcp-test/test-config.cfg << 'EOF'
        chinese
        1
        1
        1
        EOF
        
        # Modify config for faster CI testing
        sed -i '' 's/maxVisits = .*/maxVisits = 50/' ~/.katago-mcp-test/test-config.cfg
        sed -i '' 's/maxTime = .*/maxTime = 1.0/' ~/.katago-mcp-test/test-config.cfg
        
        # Test KataGo
        echo "Testing KataGo installation..."
        echo "quit" | timeout 60s katago gtp -model ~/.katago-mcp-test/test-model.bin.gz -config ~/.katago-mcp-test/test-config.cfg
        
        echo "KATAGO_TEST_MODEL=$HOME/.katago-mcp-test/test-model.bin.gz" >> $GITHUB_ENV
        echo "KATAGO_TEST_CONFIG=$HOME/.katago-mcp-test/test-config.cfg" >> $GITHUB_ENV
        
        echo "‚úÖ KataGo installation successful on macOS"
    
    - name: Run E2E tests on macOS
      if: steps.install-katago-mac.outcome == 'success'
      run: |
        echo "üß™ Running E2E tests on macOS"
        go test -v -tags=e2e ./e2e -timeout 300s
        echo "‚úÖ macOS E2E tests completed successfully"

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name == 'push'
      with:
        sarif_file: 'trivy-results.sarif'