name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "Code is not formatted. Run 'go fmt ./...' to fix."
          gofmt -d .
          exit 1
        fi
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21.x', '1.22.x']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Run tests
      run: go test -race -coverprofile=coverage.txt -covermode=atomic ./...
    
    - name: Upload coverage to Codecov
      if: matrix.go-version == '1.22.x'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        fail_ci_if_error: false
        verbose: true

  edge-case-tests:
    name: Edge Case Tests
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    - name: Run edge case tests
      run: |
        if [ -f scripts/run-edge-case-tests.sh ]; then
          chmod +x scripts/run-edge-case-tests.sh
          ./scripts/run-edge-case-tests.sh
        else
          echo "No edge case tests found, skipping..."
        fi

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    - name: Build
      run: ./build.sh
    
    - name: Test binary
      run: |
        ./katago-mcp -version || true
    
    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: katago-mcp-linux-amd64
        path: katago-mcp

  e2e-tests:
    name: E2E Tests (Docker)
    runs-on: ubuntu-latest
    needs: [lint, test]
    steps:
    - uses: actions/checkout@v4
    
    - name: Download KataGo artifacts
      run: |
        echo "üì• Downloading KataGo artifacts for Docker build..."
        ./scripts/download-katago-artifacts.sh
    
    - name: Build and run E2E tests in Docker
      run: |
        echo "üê≥ Building Docker image for E2E tests..."
        
        # Build the e2e test image
        docker build -f Dockerfile.e2e -t katago-mcp-e2e .
        
        echo "üîç Validating Docker image..."
        ./scripts/validate-docker-image.sh
        
        echo "üß™ Running E2E tests in Docker container..."
        docker run --rm katago-mcp-e2e
        
        echo "‚úÖ E2E tests completed successfully"


  security:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v3
      if: always() && github.event_name == 'push'
      with:
        sarif_file: 'trivy-results.sarif'