name: PR Required Checks

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

jobs:
  # This job will always run and provides a single status check
  # that summarizes whether all required checks have passed
  all-checks:
    name: All Required Checks
    runs-on: ubuntu-latest
    needs: [lint, test, build, security]
    if: always()
    steps:
    - name: Check all jobs status
      run: |
        echo "Lint: ${{ needs.lint.result }}"
        echo "Test: ${{ needs.test.result }}"
        echo "Build: ${{ needs.build.result }}"
        echo "Security: ${{ needs.security.result }}"
        
        if [[ "${{ needs.lint.result }}" != "success" || 
              "${{ needs.test.result }}" != "success" || 
              "${{ needs.build.result }}" != "success" || 
              "${{ needs.security.result }}" != "success" ]]; then
          echo "❌ Some required checks failed!"
          echo ""
          echo "🚫 This PR cannot be merged until all checks pass:"
          echo "   - Linting must pass (code formatting, style)"
          echo "   - Tests must pass (unit and integration tests)"  
          echo "   - Build must succeed (compilation and artifacts)"
          echo "   - Security scan must pass (vulnerability check)"
          echo ""
          echo "📝 Additionally, this PR requires approval from a maintainer."
          exit 1
        fi
        
        echo "✅ All required checks passed!"
        echo "📝 This PR still requires approval from a maintainer before merging."

  lint:
    name: Lint Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    - name: Check formatting
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "❌ Code is not formatted. Run 'go fmt ./...' to fix."
          gofmt -d .
          exit 1
        fi
        echo "✅ Code formatting is correct"
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest
        args: --timeout=5m

  test:
    name: Test Check  
    runs-on: ubuntu-latest
    strategy:
      matrix:
        go-version: ['1.21.x', '1.22.x']
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: ${{ matrix.go-version }}
        cache: true
    
    - name: Run tests
      run: |
        echo "🧪 Running tests with Go ${{ matrix.go-version }}..."
        go test -race -coverprofile=coverage.txt -covermode=atomic ./...
        echo "✅ Tests passed!"
    
    - name: Upload coverage
      if: matrix.go-version == '1.22.x'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.txt
        fail_ci_if_error: false

  build:
    name: Build Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go  
      uses: actions/setup-go@v5
      with:
        go-version: '1.21.x'
        cache: true
    
    - name: Build binary
      run: |
        echo "🔨 Building katago-mcp binary..."
        ./build.sh
        echo "✅ Build successful!"
    
    - name: Test binary
      run: |
        echo "🧪 Testing binary..."
        ./katago-mcp -version
        echo "✅ Binary works correctly!"

  security:
    name: Security Check
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Run security scan
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'table'
        exit-code: '1'
        severity: 'CRITICAL,HIGH'
    
    - name: Security scan passed
      run: echo "✅ Security scan passed - no critical or high vulnerabilities found!"